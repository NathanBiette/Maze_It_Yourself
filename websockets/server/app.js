// Generated by CoffeeScript 1.12.6
(function() {
  var PORT, PUBLIC, WS, _on_time, app, express, http, multicast, server, wss;

  http = require('http');

  express = require('express');

  WS = require('ws').Server;

  PUBLIC = __dirname + '/public/';

  PORT = process.env.PORT || 3000;

  app = express();

  server = http.createServer(app);

  wss = new WS({
    server: server,
    perMessageDeflate: false
  });

  var connections = [];
  var connectionIDcounter = 0;

  app.use(express["static"](PUBLIC));

  wss.on('connection', function(ws, req) {
    console.log('Connected ' + req.connection.remoteAddress);
    connections.push(ws);
    ws.onmessage = function(event) {
      var dict;
      console.log(event.data);
      dict = JSON.parse(event.data);
      console.log(dict);
      sendAll("Sent back: " + event.data, ws);
    };
    ws.onerror = function(error) {
      return console.log(error);
    };
    ws.onclose = function(code, reason) {
      connections.splice(ws);
      return console.log(req.connection.remoteAddress + ' has been disconnected');
    };
    return ws.send('Logged');
  });

  server.listen(PORT, process.env.IP || "0.0.0.0", function() {
    return console.log("Server started");
  });

  function sendAll (message, ws) {
    for (var i=0; i<connections.length; i++) {
      if (connections[i] != ws) {
        connections[i].send("Message: " + message);
      }
    }
}

  _on_time = function() {
    var msg;
    msg = new Date().toString();
    return wss.clients.forEach((function(_this) {
      return function(client) {
        var err;
        try {
          return client.send(msg);
        } catch (error1) {
          err = error1;
          return err;
        }
      };
    })(this));
  };

  setInterval(_on_time, 3000);

}).call(this);
