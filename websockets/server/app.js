// Generated by CoffeeScript 1.12.6
(function() {
  var PORT, PUBLIC, WS, _on_time, app, express, http, multicast, server, wss;

  http = require('http');

  express = require('express');

  WS = require('ws').Server;

  PUBLIC = __dirname + '/public/';

  PORT = process.env.PORT || 3000;

  app = express();

  server = http.createServer(app);

  wss = new WS({
    server: server,
    perMessageDeflate: false
  });

  var connections = [];
  var numberChannels = {};

  app.use(express["static"](PUBLIC));

  wss.on('connection', function(ws, req) {
    console.log('Connected ' + req.connection.remoteAddress);
    ws.id = req.connection.remoteAddress;
    ws.channel = 'global'

    if (numberChannels[ws.channel] == null) {
      numberChannels[ws.channel] = 0;
    }
    numberChannels[ws.channel] += 1;

    connections.push(ws);
    console.log(numberChannels[ws.channel] + ' clients in channel ' + ws.channel);

    ws.onmessage = function(event) {
      var dict;
      console.log(event.data);
      dict = JSON.parse(event.data);
      console.log(dict);

      switch (dict.event) {

        case 'multicast':
          multicast("Hello from " + req.connection.remoteAddress);
          break;

        case 'channel':
          channel(ws, dict.channel);
      }
    };

    ws.onerror = function(error) {
      return console.log(error);
    };

    ws.onclose = function(code, reason) {
      numberChannels[ws.channel] -= 1;
      console.log(ws.id + ' has left channel ' + ws.channel);
      console.log(numberChannels[ws.channel] + ' clients in channel ' + ws.channel);
      connections.splice(ws);
      return console.log(req.connection.remoteAddress + ' has been disconnected');
    };

    return ws.send('Logged');
  });

  server.listen(PORT, process.env.IP || "0.0.0.0", function() {
    return console.log("Server started");
  });

  function multicast (message, ws) {
    for (var i=0; i<connections.length; i++) {
      if (connections[i] != ws) {
        connections[i].send("Message: " + message);
      }
    }
  }

  function channel(ws, channel) {
    if (ws.channel == channel) {
      return
    }
    if (numberChannels[channel] >= 2) {
      console.log('Too many clients in channel ' + channel);
      ws.send('{"event":"error","msg":"Too many clients in channel"}');
      return
    }
    numberChannels[ws.channel] -= 1;
    console.log(ws.id + ' has left channel ' + ws.channel);
    console.log(numberChannels[ws.channel] + ' clients in channel ' + ws.channel);

    ws.channel = channel;
    if (numberChannels[channel] == null) {
      numberChannels[channel] = 0;
    }
    numberChannels[channel] += 1;
    console.log(ws.id + ' has joined channel ' + channel);
    console.log(numberChannels[channel] + ' clients in channel ' + channel);
  }

/*
  _on_time = function() {
    var msg;
    msg = new Date().toString();
    return wss.clients.forEach((function(_this) {
      return function(client) {
        var err;
        try {
          return client.send(msg);
        } catch (error1) {
          err = error1;
          return err;
        }
      };
    })(this));
  };

  setInterval(_on_time, 3000);
  */

}).call(this);
